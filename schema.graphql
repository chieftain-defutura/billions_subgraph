enum Status {
  Pending
  Cancelled
  Finished
}

type User @entity {
  id: ID!
  scalarNft: [ScalarNFT!] @derivedFrom(field: "owner")
  billionsNft: [BillionsNFT!] @derivedFrom(field: "owner")
  rentedNfts: [RentedNft!] @derivedFrom(field: "owner")
}

type RentedNft @entity {
  id: ID!
  billionsNft: BillionsNFT!
  battleId: BigInt!
  owner: User!
}

type Bidder @entity {
  id: ID!
  auction: Marketplace!
  bidder: Bytes!
  bidTime: BigInt!
  bidAmount: BigInt!
}

type Marketplace @entity {
  id: ID!
  auctionId: String!
  stockSymbol: String!
  isAuction: Boolean!
  basePrice: BigInt!
  currentBidPrice: BigInt
  creator: Bytes!
  currentHighestBidder: Bytes!
  bidders: [Bidder!] @derivedFrom(field: "auction")
  status: Status!
  tokenId: BigInt
  buyer: Bytes
  endTime: BigInt
  createdAt: BigInt!
}

type ScalarNFT @entity {
  id: ID!
  tokenId: BigInt!
  owner: User!
  value: String
}

type BillionsNFT @entity {
  id: ID!
  tokenId: BigInt!
  owner: User!
  stockSymbol: String!
  rentPrice: BigInt!
  sellingPrice: BigInt!
  rentable: Boolean!
}

enum BattleType {
  Health
  Blood
}

enum BattleStatus {
  Started
  Ended
  Expired
  Betting
}

type Battle @entity {
  id: ID!
  battleId: BigInt!
  battleType: BattleType!
  battleStatus: BattleStatus!
  exchange: String!
  startTime: BigInt!
  endTime: BigInt!
  entryfee: BigInt!
  nftCount: BigInt!
  owner: User!
  participants: [Participant!]!
  totalParticipants: BigInt!
}

type Participant @entity {
  id: ID!
  battleId: BigInt!
  user: User!
  billionsIds: [BillionsNFT!]!
  scalarIds: [ScalarNFT!]!
}

type TotalCount @entity {
  id: ID!
  totalAuctions: BigInt!
  totalFixedSales: BigInt!
}
